datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  password    String
  description String

  // Relacionamento many-to-one com Group (opcional)
  group       Group?      @relation(fields: [groupId], references: [id])
  groupId     String?

  coins       Int         @default(0)
  role        Role        @default(USER)

  // Um usuário pode criar vários feedbacks (AuthorFeedbacks)
  feedbacks   Feedback[]  @relation("AuthorFeedbacks")

  feedbacksR   Feedback[]  @relation("RecepentFeedbacks")

  // Um usuário pode reagir a vários feedbacks
  reactions   Reaction[]

  // Relacionamento many-to-many: um usuário pode ter vários produtos
  products    Product[] @relation("UserProducts")
}

enum Role {
  USER
  ADMIN
}

model Group {
  id        String     @id @default(uuid())
  name      String
  level     Int        @default(0)

  // Relação one-to-many: um grupo contém vários usuários
  users     User[]

  // Relação one-to-many: um grupo pode conter vários feedbacks (GroupFeedbacks)
  feedbacks Feedback[] @relation("GroupFeedbacks")

  // Relacionamento hierárquico de subgrupos
  parent    Group?     @relation("Subgroups", fields: [parentId], references: [id])
  parentId  String?
  subgroups Group[]    @relation("Subgroups")
}

model Feedback {
  id          String      @id @default(uuid())
  content     String
  file        String?
  createdAt   DateTime    @default(now())
  reportCount Int         @default(0)

  // Autor do feedback (AuthorFeedbacks)
  author      User        @relation("AuthorFeedbacks", fields: [authorId], references: [id])
  authorId    String

  recepent    User?       @relation("RecepentFeedbacks",fields: [recepentId], references: [id])
  recepentId  String?

  // Feedback opcionalmente associado a um grupo (GroupFeedbacks)
  group       Group?      @relation("GroupFeedbacks", fields: [groupId], references: [id])
  groupId     String?

  isAnonymous Boolean     @default(false)

  // Reações associadas a este feedback
  reactions   Reaction[]
}

model Reaction {
  id         String       @id @default(uuid())

  // Qual feedback a reação pertence
  feedback   Feedback     @relation(fields: [feedbackId], references: [id])
  feedbackId String

  // Qual usuário fez a reação
  user       User         @relation(fields: [userId], references: [id])
  userId     String

  type       ReactionType
  createdAt  DateTime     @default(now())
}

enum ReactionType {
  THUMBS_UP
  THUMBS_DOWN
  LIGHT_BULB
  SAD_FACE
  THUNDER
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  image       String?
  cost        Int
  users       User[] @relation("UserProducts")
}